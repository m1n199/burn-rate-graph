// Initialize ChatJS
const Month = [
  "Jan",
  "Feb",
  "March",
  "April",
  "May",
  "Jun",
  "July",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];
const BurnOutData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

const ctx = document.getElementById("BurnRateChart").getContext("2d");
const gradient = ctx.createLinearGradient(0, 0, 0, 400);
gradient.addColorStop(0, "#00C2AC"); // Light green at the bottom
gradient.addColorStop(1, "#C9EBE9"); // Dark green at the top

function getValues() {
  const inputs = document.querySelectorAll('input[type="number"]');
  const selects = document.querySelectorAll("select");
  let values = {};

  inputs.forEach((input) => {
    const value = parseFloat(input.value.replace(/\s/g, ""));
    if (!isNaN(value)) values[input.id] = value;
  });

  selects.forEach((select) => {
    if (
      `${select.id}`.endsWith("Month") &&
      (select.value == -1 || select.value == "-1")
    )
      return;
    values[select.id] = parseFloat(select.value);
  });

  return [
    values,
    (value) => {
      const BurnStatus = document.getElementById("BurnStatus");
      if (!BurnStatus) return;
      BurnStatus.textContent = value;
    },
    (value) => {
      const Runaway = document.getElementById("Runaway");
      if (!Runaway) return;
      Runaway.textContent = parseInt(value);
    },
  ];
}

let Runaway = 0;
// hide style
const hidestyle = document.createElement("style");
if (hidestyle) {
  hidestyle.innerHTML = ".hide {display: none;}";
  document.head.appendChild(hidestyle);
}
const extra = document.querySelectorAll("[data-burn-rate]");
const toggleHide = (d) => extra.forEach((e) => (e.style.display = d));
toggleHide("none");
let Graph = null;
function initGraph() {
  Graph = new Chart(ctx, {
    type: "bar",
    data: {
      labels: Month,
      datasets: [
        {
          label: `Burn Rate And Runaway`,
          data: [],
          borderWidth: 1,
          backgroundColor: gradient,
        },
      ],
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          ticks: { color: "#00C2AC" },
          grid: { color: "#C9EBE9" },
          border: { width: 2, color: "#00C2AC" },
        },
        x: {
          ticks: { color: "#00C2AC" },
          grid: { color: "#C9EBE9" },
          border: {
            width: 2,
            color: "#00C2AC",
          },
        },
      },
    },
  });
}
function CreateGraph() {
  if (!Graph) initGraph(), toggleHide("block");
  const values = getValues();
  let [
    {
      CurrentBalance,
      MonthlyRevenue,
      MonthlyExpensive,
      GrowthRatePercentage,

      ExpensiveAdditionMonth,
      ExpensiveAdditionAmmount,

      ExpensiveReductionMonth,
      ExpensiveReductionRate,
    },
    BurnRateSatus,
    RunawayStatus,
  ] = values;
  GrowthRatePercentage /= 100;
  if (ExpensiveReductionRate) ExpensiveReductionRate /= 100;
  let ReduceExpence = () => {
    if (ExpensiveReductionRate)
      MonthlyExpensive -= MonthlyExpensive * ExpensiveReductionRate; // Reduce expence at specified Month
  };
  let IncreateExpence = () => {
    if (ExpensiveAdditionAmmount) MonthlyExpensive += ExpensiveAdditionAmmount; // Increase expence at specified Month
  };
  IncreateExpence();

  Month.forEach((m, i) => {
    // For ExpensiveReduction
    if (ExpensiveReductionMonth && ExpensiveReductionMonth == i)
      ReduceExpence();
    // For ExpensiveAddition
    if (ExpensiveAdditionMonth && ExpensiveAdditionMonth == i)
      IncreateExpence();
    // Basic
    const InitilBalance = CurrentBalance;
    CurrentBalance = CurrentBalance - MonthlyExpensive + MonthlyRevenue;
    BurnOutData[i] = CurrentBalance - InitilBalance;
    MonthlyRevenue += MonthlyRevenue * GrowthRatePercentage; // Increate Revenue
    Runaway = CurrentBalance / MonthlyExpensive;
    // if (!i) RunawayStatus(Runaway); // Runaway
  });
  const label = `Burn Rate ${
    BurnOutData[BurnOutData.length - 1] > 0 ? "+ve" : "-ve"
  } and Runaway ${Runaway.toFixed(2)}`;
  const data = BurnOutData;
  Graph.data.datasets[0].label = label;
  Graph.data.datasets[0].data = data;
  Graph.update();
  if (
    BurnOutData[BurnOutData.length - 1] &&
    BurnOutData[BurnOutData.length - 1] > 0
  )
    BurnRateSatus("Burn Rate Positive !");
}
document.querySelector("form button")?.addEventListener("click", () => {
  CreateGraph();
});
